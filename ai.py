import requests

# ======== –ù–ê–°–¢–†–û–ô–ö–ò ========
OPENROUTER_API_KEY = "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"
DEEPMODEL = "deepseek/deepseek-chat-v3-0324:free"
KNOWLEDGE_FILE = "knowledge.txt"
MAX_HISTORY = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏

# ======== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ========
conversation_history = []

# ======== –ó–ê–ì–†–£–ó–ö–ê –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô ========
def load_knowledge():
    with open(KNOWLEDGE_FILE, "r", encoding="utf-8") as f:
        return f.read()

# ======== –ó–ê–ü–†–û–° –ö DEEPSEEK ========


def ask_deepseek(user_query):
    global conversation_history
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    knowledge = load_knowledge()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    system_prompt = f"""
    –¢—ã ‚Äî –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ –∏ –¥–µ–ª–∞—Ç—å —Ç–∞–∫ —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –∑–∞—Ö–æ—Ç–µ–ª –∑–∞–∫–∞–∑–∞—Ç—å –º–æ–∏ –£–°–õ–£–ì–ò –ø–æ–¥ –∫–ª—é—á —Ç—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    –£—á–∏—Ç—ã–≤–∞–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö, —Å–∫–∞–∂–∏: ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞¬ª. –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤—Ä–æ–¥–µ ** –∏–ª–∏ –≥–∞–ª–æ—á–µ–∫, —Å—Ç—Ä–µ–ª–æ–∫

    –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:
    {knowledge}
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
    conversation_history.append({"role": "user", "content": user_query})
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if len(conversation_history) > MAX_HISTORY:
        conversation_history = conversation_history[-MAX_HISTORY:]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = [
        {"role": "system", "content": system_prompt},
        *conversation_history
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "http://localhost",
        "X-Title": "AI Consultant",
    }
    
    data = {
        "model": DEEPMODEL,
        "messages": messages,
        "temperature": 0.5,  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    }
    
    response = requests.post(url, headers=headers, json=data)
    
    if response.status_code == 200:
        ai_response = response.json()["choices"][0]["message"]["content"]
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversation_history.append({"role": "assistant", "content": ai_response})
        return ai_response
    else:
        return f"–û—à–∏–±–∫–∞ API: {response.text}"

# ======= –°–æ–µ–¥–µ–Ω–µ–Ω–∏–µ —Å —Ç–≥ –±–æ—Ç–æ–º =======

class AIHelper:
    def __init__(self, company_info: str):
        self.company_info = company_info

    def get_response(self, user_query: str) -> str:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é ask_deepseek
        return ask_deepseek(user_query)

def setup_ai_handlers(bot_instance=None, ai_helper=None):
    if bot_instance:  # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å Telegram-–±–æ—Ç–æ–º
        @bot_instance.message_handler(func=lambda message: True)
        def handle_ai_questions(message):
            if message.text.startswith('/') or message.text in [
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π",
                "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É",
                "–£—Å–ª—É–≥–∏",
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            ]:
                return
                
            bot_instance.send_chat_action(message.chat.id, 'typing')
            response = ask_deepseek(message.text)
            bot_instance.reply_to(message, response)
    else:  # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        print("ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≥–æ—Ç–æ–≤! (–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit')")
        while True:
            query = input("\n–í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            if query.lower() in ["exit", "–≤—ã—Ö–æ–¥"]:
                break
            answer = ask_deepseek(query)
            print("\n–û—Ç–≤–µ—Ç:", answer)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ü–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
        bot_instance.send_chat_action(message.chat.id, 'typing')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = ai_helper.get_response(message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot_instance.reply_to(message, response)
